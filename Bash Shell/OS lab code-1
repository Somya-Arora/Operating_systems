/*
NAME:KARTHIK NATH.S
ROLL NO:1410110187
TEAM MATE NAME:JASKARAN SINGH SAINI
TEAM NO:7
*/
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<sys/wait.h>
#include<sys/types.h>
#include<ctype.h>
#include<unistd.h>
#define MAX_LINE 80	//Defining a constant to MAX_lINE
int historyread();  //reads history from file to output
int exe(char *bin,char **args,int back); //function to execute -fork()+execvp()
int historywrite(char *cmd);	//writes command to file
int parse(char *cmd,int argsc);//seperates each command into char ** depending upon no of arguments
char * historytext(char *cmd);	//function to execute from history
int main(){
	char *cmd,*temp; //command to be taken in cmd and temp is for no of arguments calculation
	int argsc;
	int should_run=1;
	cmd=malloc(MAX_LINE* sizeof(char*)); //dynamic memory allocation
	while(should_run)
		{
		argsc=1;
		printf("ENTER COMMAND>");
		fflush(stdout);
		fgets(cmd,MAX_LINE,stdin); // command is taken into cmd till \n is encountered
		if(strcmp(cmd, "quit\n")==0) //to quit program
			{
			should_run=0;
			exit(0);
			}	
		if((strcmp(cmd,"!!\n")==0)) //to run the last command from history
			{
			cmd=historytext(cmd);			
			}
		if(strcmp(cmd, "history\n")==0) //to display history
			historyread();
		else
			{
			historywrite(cmd); // writing all commands into history file
			temp=cmd;
			while(*temp!='\0')
				{
				if(*temp==' ')
					{
					argsc++; //calculating no of arguments(top-1,ps -ael-2)
					}	
				temp=temp+1;
				}
			parse(cmd,argsc);	//calling parse function
			}
	}
return 0;
}
/*
Function historywrite writes the commands to history1 text file 
I t has the input command as an argument
*/
int historywrite(char *cmd)
{
FILE *p;
p=fopen("history1.txt","a"); //file in append mode
if(strcmp(cmd, "history\n")!=0)
	{
	fputs(cmd,p); //Stores value of command into file
	fclose(p);	//closes the file
	}	
return 0;
}
/*
Function historyread reads from the text file created and prints it onto the screen
*/
int historyread()
{
int i=1;
FILE *q;
q=fopen("history1.txt","r"); //file opened in read mode
char cmdout[80];
while(fgets(cmdout,sizeof(cmdout),q)!='\0')
	{
	printf("%d %s",i, cmdout); //function to print out history
	i++;
	}
fclose(q); //closes the file
return 0;
}
/*
function parse is used to seperate the command into seperate arguments and save each into char pointer array[char **args]
It takes both the command and argument count as inputs
*/
int parse(char *cmd,int argsc)
{int back=0;
char *args[MAX_LINE/2+1];
int i=0;
while(i<MAX_LINE/2+1){			//It dynamically allocates  all values of args a memory 
args[i]=malloc(MAX_LINE* sizeof(char*));
i++;
}
i=0;
int line=0;
while(*cmd!='\0')
	{
	if(*cmd==' '||*cmd=='\n')
		{
		args[i][line]='\0';//when ' ' or '\n' is encountered it moves to next args
		i++;
		line=0;
		}
	else
		{
		args[i][line]=*cmd;//writes values to arg[i] for each character pointed by cmd pointer
		line++;
		}
	cmd++;
	}
args[i]=NULL;
if(args[argsc-1][0]=='&') //to determine if process should wait by determing &
{
back=1;
args[argsc-1]=NULL;
}
exe(args[0], args ,back); // executes to fork
return 0;
}
/*
function exe  to fork and execvp the new args

*/
int exe(char *bin,char **args,int back)
{
pid_t pid =fork();
if(pid<0)
	{
	printf("Error\n");//error checking
	exit(1);
	}
else if(pid==0)
	{
	execvp(bin, args);//executing child
	exit(0);
	printf("Process ended!\n");
	}
else {
	if(back==0)
	{
	waitpid(pid,NULL,0);//waiting if & is encountered
	}	
	}
return 0;
}
/*
function to read and execute history text by typing !!
*/
char * historytext(char *cmd)
{
FILE *m;
char *out;
out=malloc(MAX_LINE* sizeof(char *));//dynamic allocation
m=fopen("history1.txt","r");
while(fgets(out,sizeof(out),m)!='\0')
	{
	continue;
	}
fclose(m);
return (out);
}
